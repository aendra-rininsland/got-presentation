mixin url(href)
	a(href="//" + href)= href

section.intro
	h1 A Song Of Charts and Stuff
	h2 Ændrew Rininsland
	h3
		img(src="images/twitter.svg" style="width: 1em;")
		| &nbsp;&nbsp;@aendrew
		br
		img(src="images/github.svg" style="width: 1em;")
		| &nbsp;&nbsp;&nbsp;aendrew
	h4
		| 3 August 2017,
		a(href='https://www.meetup.com/Visualising-Data-London/')
			| Visualising Data London

section
	h1.bullet $ whoami
	ul
		li Earlier this year I released
			a(href="https://www.amazon.co.uk/D3-js-4-x-Data-Visualization-Third-ebook/dp/B01MG90SSJ/") a book about D3 v4
		li This included copious amounts of Game Of Thrones charts
		li D3 is a fantastic library for doing rapid data visualisations
		li
			| I work on an editorial team at the Financial Times that rapidly creates charts for print and digital consumption

section
	h1.bullet I think winter is here?
	ul
		li Game of Thrones is really pretty crazy right now
		li We're into the penultimate season
		li Lots of plots are converging
		li Did I mention I did a lot of Game of Thrones charts in my book...?
section
	h1
		| ...And now we're going to recreate a bunch of them in rapid-fire succession
		br
		em — or pay the iron price

section
	h2 Preliminary setup
	h3.bullet I'm assuming you're using Webpack and Babel or some such
	h3.bullet
		| A lighter solution is my SystemJS-based&nbsp;
		u d3-bootloader
		|, which can transpile ES6 module syntax and includes all of D3 loaded via CDN
	pre
		code.language-html.
			&lt;script src="//unpkg.com/@financial-times/d3-bootloader" async&gt;&lt;/script&gt;
	h3.bullet Put your entry code in a file called "index.js"
	h4
		a(href='https://www.npmjs.com/@financial-times/d3-bootloader')
			| npmjs.com/@financial-times/d3-bootloader
section
	h1 Two types of layouts in D3 v4
	h2.bullet Hierarchical
	h2.bullet Not-So-Hierarchical
section
	h1 Two types of layouts in D3 v4
	h2.bullet Hierarchical
	ul
		li Pack ✅
		li Tree (tidytree) ✅
		li Cluster (pretty much the same as Tree)
		li Treemap ✅
		li Partition (kinda like Treemap)

section
	h1 Two types of layouts in D3 v4
	h2.bullet Not-So-Hierarchical
	ul
		li Force-directed stuff ✅
		li Pie charts ✅
		li Histograms (this one's really useful but my data doesn't work)
		li Stacked charts ✅
		li Chord

section
	h3 About the data
	h4
		| All data is available on GitHub:
		br
		a(href='https://github.com/aendrew/got-presentation') github.com/aendrew/got-presentation
	ul
		li
			em Dataset 1:
			|  An API of Ice and Fire (characters)
			ul
				li
					+url('github.com/joakimskoog/AnApiOfIceAndFire')
		li
			em Dataset 2:
			|  Time, "Every character who has died on GoT"
			ul
				li
					+url('time.com/3924852/every-game-of-thrones-death/')
		li
			em Dataset 3:
			|  Shirin Glander, "Network analysis of GoT family ties"
			ul
				li
					+url('shiring.github.io/networks/2017/05/15/got_final')
		li
			em Dataset 4:
			|  Andrew Beveridge, "Network Of Thrones"
			ul
				li
					+url('www.macalester.edu/~abeverid/thrones.html')
		li
			em Dataset 5:
			|  ninewheels0, "Characters by screen time: GoT"
			ul
				li
					+url('www.imdb.com/list/ls076752033/')

section
	h3 About the data
	ul
		li
			| Dataset 1: An API of Ice and Fire (characters)
			ul
				li Flat JSON array of objects
				li
					+url('github.com/joakimskoog/AnApiOfIceAndFire')
			pre.small
				code.language-json.
					[
						{
							"Id": 12,
							"Name":"Balon Greyjoy",
							"IsFemale":false,
							"Culture":"",
							"Titles":["Iron King", "King of the Isles and the North",  ... ],
							"Aliases":["Balon the Brave","Balon the Blessed", ... ],
							"Born":"",
							"Died":"299 AC, at Pyke",
							"Father":836,
							"Mother":null,
							"Spouse":66,"
							Children":[913,718,150,1022],
							"Allegiances":[],
							"Books":[1,2,3,5,8],
							"PovBooks":[],
							"PlayedBy":["Patrick Malahide"],
							"TvSeries":["Season 2","Season 3", "Season 6"]
						},
					]
section
	h3 About the data
	ul
		li
			| Dataset 2: Time, "Every character who has died on Game Of Thrones"
			ul
				li JSON array of objects
				li
					+url('time.com/3924852/every-game-of-thrones-death/')
			pre.small
				code.language-json.
					{
						"name": ...
						"source": ...
						"data": [
							{
								"name": "Will",
								"role": "Ranger of the Night’s Watch",
								"death": {
									"season": 1,
									"episode": 1
								},
								"execution": "Beheaded for desertion by Ned Stark",
								"likelihoodOfReturn": "0%"
							},
							...
						]
					}
section
	h3 About the data
	ul
		li
			| Dataset 3: Shirin Glander, "Network analysis of Game Of Thrones family ties"
			ul
				li Unstratified hierarchy
				li I manually generated this from the R data files
					ul
						li NodeJS script in repo (data/make-got-lineage.js)
				li
					+url('shiring.github.io/networks/2017/05/15/got_final')
			pre.small
				code.language-json.
					[
						{
							"name":"Alys Arryn",
							"male":0,
							"house":"House Arryn",
							"popularity":0.0803,
							"shape":"circle",
							"father":"Jasper Arryn",
							"mother":"unknown"
						}
						...
					]

section
	h3 About the data
	ul
		li
			| Dataset 4: Andrew Beveridge, "Network Of Thrones"
			ul
				li Traditional network Dataset
				li Node and Edges
				li
					+url('www.macalester.edu/~abeverid/thrones.html')
					ul
						li I've converted this to JSON for easy use.
						li NodeJS script in repo (data/make-network-json.js)
			pre.small
				code.language-json.
					{
						nodes: [
							{
								"id": "Jaime-Lannister",
								"label": "Jaime Lannister",
								"pagerank": "0.015460587",
								"degree": "101",
								"weighted degree": "1569",
								"betweenness": "31825.98727",
								"modularity_class": "3",
								"eigencentrality": "0.881689191",
								"top names": "Jaime"
							},
							...
						],
						links: [
							{
								"Source": "Waymar-Royce",
								"Target": "Will-(prologue)",
								"Type": "Undirected",
								"id": "2819",
								"weight": "18"
							},
							...
						]
					}

section
	h3 About the data
	ul
		li
			| Dataset 5: ninewheels0, "Characters by screen time: GoT"
			ul
				li Flat JSON blob
				li
					+url('www.imdb.com/list/ls076752033/')
					ul
						li I've converted this to JSON for easy use.
						li I've also mashed it up with the lineages to be more useful
			pre.small
				code.language-json.
					[
						{
						"name": "Tyrion Lannister",
						"imdbUrl": "http://www.imdb.com/character/ch0146096/",
						"screentime": 293.3,
						"episodes": 54,
						"portrayedBy": {
						"name": "Peter Dinklage",
						"imdbUrl": "http://www.imdb.com/name/nm0227759/"
						}
						...
					]

section
	h1 A Rininsland always codes his charts¹
	h5 ¹
		small Except here I'll mainly just show code samples for the sake of brevity
	h3 Sorry if this goes way too fast, I have like 3 minutes per chart!
	h4 (Also, I leave out any interactivity code — but it's in the repo)

section
	h2 Preliminary setup
	h3 Create a factory function that sets up everything
	pre.small
		code.language-javascript.
			export default function chartFactory(selector, chart, opts = {}) {
				const wrapper = d3.select(selector);
				const svg = wrapper.append('svg');
				svg.attr('width', opts.width || wrapper.node().clientWidth);
				svg.attr('height', opts.height || wrapper.node().clientHeight);
				const container = svg.append('g');
				const margin = opts.margin || {};
				container.attr('transform', `translate(${margin.left || 0}, ${margin.top || 0})`);
				chart.call({wrapper, svg, container}, opts, d3.scaleOrdinal(d3.schemeCategory20));
			}

section
	h2 Preliminary setup
	h3 chartFactory in depth 1/2
	pre
		code.language-javascript.
			export default function chartFactory(selector, chart, opts = {}) {
				const wrapper = d3.select(selector);
				const svg = wrapper.append('svg');
				svg.attr('width', opts.width || wrapper.node().clientWidth);
				svg.attr('height', opts.height || wrapper.node().clientHeight);


section
	h2 Preliminary setup
	h3 chartFactory in depth 2/2
	pre
		code.language-javascript.
				const container = svg.append('g');
				const margin = opts.margin || {};
				container.attr('transform',
					`translate(${margin.left || 0}, ${margin.top || 0})`);
				chart.call({wrapper, svg, container},
					opts, d3.scaleOrdinal(d3.schemeCategory20));
			}

section
	h3 Pie charts
	h4 BOOOORING but good for summary data?
	h5 Let's look at gender from "An API Of Ice And Fire"

section
	h3 Pie charts (code, 1/5)
	pre
		code.language-javascript.
			export async function pie(opts, color) {
				// Data
				const data = await (await fetch('../data/AnApiOfIceAndFire.json')).json();
				const byGender = data.reduce(
					(col, cur) => (col[cur.IsFemale ? 'female' : 'male']++, col),
					{male: 0, female: 0}
				);

section
	h3 Pie charts (code, 2/5)
	pre
		code.language-javascript.
			// Initialise generators
			const pie = d3.pie().value(d => d[1]);
			const pieData = pie(Object.entries(byGender))
				.sort((a, b) => b.data[1] - a.data[1]);
			color.domain(pieData.map(d => d.data[0]));

section
	h3 Pie charts (code, 3/5)
	pre
		code.language-javascript.
			const arc = d3.arc()
				.outerRadius(this.svg.node().clientWidth / 6)
				.innerRadius(this.svg.node().clientWidth / 6.5);

section
	h3 Pie charts (code, 4/5)
	pre
		code.language-javascript.
			const chart = this.container.classed('pie', true)
				.attr('transform',
					`translate(${this.svg.node().clientWidth / 2},
						${this.svg.node().clientHeight / 2})`);

section
	h3 Pie charts (code, 5/5)
	pre
		code.language-javascript.
				const slices = chart.selectAll('.arc')
				.data(pieData)
				.enter()
				.append('path')
				.attr('d', arc)
				.classed('arc', true)
				.attr('fill', d => d.data[0] === 'male' ? 'blue' : 'pink');
			} // end pie

section#demo-pie
	h3 Pie: gender in Westeros
	div(style="width: 100%; height: 400px;")#chart-pie.chart

section
	h3 Stacked charts
	h4 Good for depicting similar data over time
	h5 This time, let's look at deaths using the Time dataset

section
	h3 Stacked charts (code, 1/6)
	pre
		code.language-javascript.
			export async function stack(opts = {wiggle: true}, color) {
				const {data} = await (await fetch('data/deaths-by-season.json')).json();
				const episodesPerSeason = 10;
				const totalSeasons = 6;
				const {clientHeight: height, clientWidth: width} = this.svg.node();

section
	h3 Stacked charts (code, 2/6)
	pre.slightly-smaller
		code.language-javascript.
			const seasons = d3.nest()
			.key(d => d.death.episode).key(d => d.death.season)
			.entries(data.filter(d => !d.death.isFlashback))
			.map(v => {
				return d3.range(1, totalSeasons + 1).reduce((item, episodeNumber) => {
					const deaths = v.values.filter(d => Number(d.key) === episodeNumber).shift() || 0;
					item[`season-${episodeNumber}`] = deaths ? deaths.values.length : 0;
					return item;
				}, {episode: v.key});
			})
			.sort((a, b) => Number(a.episode) - Number(b.episode));

section
	h3 Stacked charts (code, 3/6)
	pre
		code.language-javascript.
			const stack = d3.stack()
				.keys(
					d3.range(1, totalSeasons + 1)
						.map(key => `season-${key}`));

			if (opts.wiggle === 'true') {
				stack.offset(d3.stackOffsetWiggle);
			}

section
	h3 Stacked charts (code, 4/6)
	pre
		code.language-javascript.
			const x = d3.scaleLinear()
			.domain([1, episodesPerSeason])
			.range([0, width - 20]);

			const y = d3.scaleLinear()
			.domain([
				d3.min(stack(seasons), d => d3.min(d, e => e[0])),
				d3.max(stack(seasons), d => d3.max(d, e => e[1]))
			]).range([height, 0]);

section
	h3 Stacked charts (code, 5/6)
	pre
		code.language-javascript.
			const area = d3.area()
			.x(d => x(d.data.episode))
			.y0(d => y(d[0]))
			.y1(d => y(d[1]))
			.curve(d3.curveBasis);

section
	h3 Stacked charts (code, 6/6)
	pre
		code.language-javascript.
				const streams = this.container.append('g')
				.attr('class', 'streams')
				.selectAll('path')
				.data(stack(seasons))
					.enter()
					.append('path')
					.attr('d', area)
					.style('fill', (d, i) => color(i));
			} // end stacked

section#demo-stack
	h3 Stack (streamgraph): deaths per season by episode
	div(style="width: 100%; height: 400px;", data-wiggle="true")#chart-stack.chart

section
	h3 Trees (tidytrees)
	h4 Good for depicting explicit hierarchies
	h5 Let's create a Westeros family tree using the lineages dataset

section
	h3 Tree charts (code, 1/5)
	pre
		code.language-javascript.
			export async function tree(opts, color) {
				const data = (await (await fetch('data/got-lineages.json')).json());
				data.push({name: 'unknown', father: ''}); // Adds root node

				const {clientHeight: height, clientWidth: width} = this.svg.node();
				const chart = this.container;

section
	h3 Tree charts (code, 2/5)
	pre
		code.language-javascript.
			const stratify = d3.stratify()
				.parentId(d => d.father)
				.id(d => d.name);

			const root = stratify(data);

section
	h3 Tree charts (code, 3/5)
	pre
		code.language-javascript.
			const layout = d3.tree()
				.size([width, height - 20]);

			const line = d3.linkVertical()
				.x(d => d.x)
				.y(d => d.y);

section
	h3 Tree charts (code, 4/5)
	pre.slightly-smaller
		code.language-javascript.
			const links = layout(root)
				.descendants()
				.slice(1);
			chart.selectAll('.link')
				.data(links)
				.enter()
					.append('path')
					.classed('link', true)
					.attr('fill', 'none')
					.attr('stroke', d => color(d.data.house))
					.attr('d', line);

section
	h3 Tree charts (code, 5/5)
	pre.slightly-smaller
		code.language-javascript.
			const node = chart.selectAll('.node')
				.data(root.descendants())
				.enter()
				.append('circle')
				.classed('node', true)
				.attr('r', 4.5)
				.attr('fill', d => color(d.data.house))
				.attr('class', 'node')
				.attr('cx', d => d.x)
				.attr('cy', d => d.y);
			} // end tree

section#demo-tree
	h3 Tree (dendrograph): lineages
	div(style="width: 100%; height: 400px;")#chart-tree.chart

section
	h3 Force-directed
	h4 Useful for many things, including non-hierarchical networks
	h5 Time for a Network Of Thrones!
	pre
		code.language-javascript.

section
	h3 Force-code (1/6)
	pre
		code.language-javascript.
			export async function force(opts, color) {
				const data = (await (await fetch('data/network-of-thrones.json')).json());
				const {clientHeight: height, clientWidth: width} = this.svg.node();

section
	h3 Force-code (2/6)
	pre
		code.language-javascript.
			const link = this.container.append('g').attr('class', 'links')
				.selectAll('line')
				.data(data.edges)
				.enter()
				.append('line')
				.attr('stroke', d => color(d.Source))
				.attr('stroke-width', d => Math.sqrt(Number(d.weight)));

section
	h3 Force-code (3/6)
	pre
		code.language-javascript.
			const radius = d3.scaleLinear()
				.domain(d3.extent(data.nodes, d => Number(d.pagerank)))
				.range([4, 20]);

section
	h3 Force-code (4/6)
	pre
		code.language-javascript.
			const node = this.container.append('g').attr('class', 'nodes')
				.selectAll('circle')
				.data(data.nodes)
				.enter()
				.append('circle')
				.attr('r', d => radius(Number(d.pagerank)))
				.attr('fill', d => color(d.modularity_class));

section
	h3 Force-code (5/6)
	pre
		code.language-javascript.
			const padding = 2;
			const sim = d3.forceSimulation()
				.nodes(data.nodes)
				.force('collide', d3.forceCollide(d => radius(Number(d.pagerank)) + padding))
				.force('center', d3.forceCenter(width / 2, height / 2))
				.force('link', d3.forceLink(data.edges).id(d => d.id).distance(10))
				.on('tick', ticked);

section
	h3 Force-code (6/6)
	pre
		code.language-javascript.
				function ticked() {
					link.attr('x1', d => d.source.x)
						.attr('y1', d => d.source.y)
						.attr('x2', d => d.target.x)
						.attr('y2', d => d.target.y);

					node.attr('cx', d => d.x)
						.attr('cy', d => d.y);
				}
			} // end force

section#demo-force
	h3 Force-directed: character relations
	div(style="width: 100%; height: 400px;")#chart-force.chart

section
	h3 Treemap
	h4 Kinda like a super pie chart!
	h5 How much screen time has each character had?

section
	h3 Treemap code (1/5)
	pre
		code.language-javascript.
			export async function treemap(opts, color) {
				const data = await (await fetch('data/lineages-screentimes.json')).json();
				data.push({name: 'unknown', father: ''}); // Adds root node

				const {clientHeight: height, clientWidth: width} = this.svg.node();

section
	h3 Treemap code (2/5)
	pre
		code.language-javascript.
			const stratify = d3.stratify()
				.parentId(d => d.father)
				.id(d => d.name);

			const root = stratify(data)
				.sum(d => d.screentime)
				.sort((a, b) => b.height - a.height || b.value - a.value);

section
	h3 Treemap code (3/5)
	pre
		code.language-javascript.
			const cellPadding = 10;

			const layout = d3.treemap()
				.size([
					width - 100,
					height
				])
				.padding(cellPadding);

			layout(root);

section
	h3 Treemap code (4/5)
	pre
		code.language-javascript.
			const nodes = this.container.selectAll('.node')
				.data(root.descendants().slice(1))
				.enter()
				.append('g')
				.attr('class', 'node');

section
	h3 Treemap code (5/5)
	pre
		code.language-javascript.
				nodes.append('rect')
					.attr('x', d => d.x0)
					.attr('y', d => d.y0)
					.attr('width', d => d.x1 - d.x0)
					.attr('height', d => d.y1 - d.y0)
					.attr('stroke', 'black')
					.attr('fill', d => color(d.data.house));
			} // treemap ends

section#demo-treemap
	h3 Treemap: character screentimes
	div(style="width: 100%; height: 400px;")#chart-treemap.chart

section
	h3 Bonus: Pack charts
	h4 Similar to treemaps, but less compact
	h5 I think they look pretty snazzy, personally!

section
	h3 Pack chart code (1/4)
	pre
		code.language-javascript.
			export async function pack(opts, color) {
				const data = await (await fetch('data/lineages-screentimes.json')).json();
				data.push({name: 'unknown', father: ''}); // Adds root node

				const {clientHeight: height, clientWidth: width} = this.svg.node();

section
	h3 Pack chart code (2/4)
	pre
		code.language-javascript.
			const stratify = d3.stratify()
				.parentId(d => d.father)
				.id(d => d.name);

			const root = stratify(data)
				.sum(d => d.screentime)
				.sort((a, b) => b.value - a.value);

section
	h3 Pack chart code (3/4)
	pre
		code.language-javascript.
			const layout = d3.pack()
				.size([
					width - 100,
					height
				]);

			layout(root);

section
	h3 Pack chart code (4/4)
	pre
		code.language-javascript.
				const nodes = this.container.selectAll('.node')
					.data(root.descendants().slice(1))
					.enter()
					.append('circle')
					.attr('class', 'node')
					.attr('cx', d => d.x)
					.attr('cy', d => d.y)
					.attr('r', d => d.r)
					.attr('stroke', d => d3.color(color(d.data.house)).darker())
					.attr('fill', d => color(d.data.house));
			} // pack ends

section#demo-pack
	h3 Pack: character screentimes
	div(style="width: 100%; height: 400px;")#chart-pack.chart

section
	h2 That was a lot of charts!
	h3.bullet D3 layouts are incredibly powerful, even if they're a little confusing to start with
	h3.bullet They all use similar idioms, however

section
	h3 Remember: a layout simply helps D3 put shapes in a particular configuration

section
	h1 Thank you! Questions?
	h3 Slides and code are online at:
	br
	+url('github.com/aendrew/got-presentation')
